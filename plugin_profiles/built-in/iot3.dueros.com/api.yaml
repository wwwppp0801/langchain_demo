openapi: 3.0.1
info:
  title: DuerOS Iot
  description: DuerOS Iot plugin. Can help you develop an automatic control scene, with iot devices in your home. Iot devices include lights, air conditioners, smart speakers, temperature sensor, humidity sensor, light sensor, Switch, curtain, DoorLock, HumanSensor, TemperatureHumiditySensor
  version: 'v1'
servers:
  - url: http://127.0.0.1:8002/

components:
  schemas:
    VoiceCommand:
      type: object
      required: [ command ]
      properties:
        command:
          type: string
      description: >
        Triggered when users give voice commands through smart speakers
    Time:
      type: object
      required: [ repeat, type ]
      description: >
        Triggered when the set time is up
      properties:
        time:
          type: string
          description: 'when value of type filed is time, this filed is required. format:```{hour}:{minutes}```, eg: ```22:06```. The {hour} field is on a 24-hour basis. No this field means "now".'
        date:
          type: string
          description: 'format:```{year}-{month}-{day}```, eg: ```2023-03-26```.  Only valid when repeat=="none". No this field means "today".'
        repeat:
          type: string
          enum: [ workday, restday, everyday, spring, summer, fall, winter, none ]
          description: >
            On what days will this be triggered :
            workday - any day that you work.
            restday - any day that you rest.
            everyday - everyday.
            spring - one of the four temperate seasons. lasting from March to May north of the equator, and from September to November south of the equator.
            summer - one of the four temperate seasons. lasting from June to Augest north of the equator, and from December to February south of the equator.
            fall - one of the four temperate seasons. lasting from September to November north of the equator, and from March to May south of the equator.
            winter - one of the four temperate seasons. lasting from December to February north of the equator, and from June to Augest south of the equator.
            none - no repeat.
    Switch:
      type: object
      description: >
        Triggered when the switch device is pressed

    DoorLock:
      type: object
      description: Triggered when the doorLock is locked or unlocked, or triggered when a door magne sensor on a door detect the door is locked or unlocked. doorLock has diffent way to open, such as open by NFC, password, or fingprint. A door magne sensor can just detect the door is locked or unlocked, don't have diffent way to open the door.
      properties:
        state:
          type: string
          enum: [lock, unlock]
          description: lock - when the doorLock is locked, or door magne sensor detect the door is open; unlock - when the doorLock is unlock, or door magne sensor detect the door is closed.
        openBy:
          type: string
          enum: [NFC, password, fingerprint]
          description: >
            the way how the door is opened from outside. if we don't know how the doorLock is opend, this field can be remove or be none.
            NFC - the doorLock is opened by NFC card
            password - the doorLock is opened by number password
            fingerprint - the doorLock is opened by fingerprint.
    HumanSensor:
      type: object
      description: >
        Triggered when the human sensor sense a person pass or no body in the zone
      properties:
        event:
          type: string
          enum: [humanPass, nobody]
          description: humanPass - HumanSensor detect somebody on passed; noBody - HumanSensor detect there is no human in the zone.
        nobodyDurationTime:
          type: string
          enum: [oneMinute, threeMinute, fiveMinute, tenMinute]
          description: >
            how long HumanSensor detect the zone has nobody come in continued, where event value is Nobody, this field should have value, otherwise, this field should be empty
            oneMinute - HumanSensor detect the zone has nobody come in continued one minute
            threeMinute - HumanSensor detect the zone has nobody come in continued three minutes
            fiveMinute - HumanSensor detect the zone has nobody come in continued five minutes
            tenMinute - HumanSensor detect the zone has nobody come in continued ten minutes
    TemperatureHumiditySensor:
      type: object
      description: >
        Triggered when the TemperatureHumiditySensor sense temperature or humidity to a setting value. for example,the temperature up to 25 celsius degree, the humidity down to 30 percent.
      properties:
        temperatureChange:
          type: string
          enum: [upto, downto]
          description: upto - temperature up to a value becauseof environment change; upto - temperature down to a value becauseof environment change.
        temperature:
          type: integer
          minimum: 16
          maximum: 35
          description: >
            Celsius temperature.
        humidityChange:
          type: string
          enum: [upto, downto]
          description: upto - humidity up to a value becauseof environment change; upto - humidity down to a value becauseof environment change.
        humidity:
          type: integer
          minimum: 0
          maximum: 100
          description: >
            Percentage of humidity level.
        
    alarm:
      type: object
      description: Set an alarm clock. Can play a voice alarm, or music when time is up.
      properties:
        tts:
          type: string
          description: 'Text to generate voice alarm.'
    light:
      type: object
      description: Can be opened or closed. Have ability to adjust color temperature and brightness.
      properties:
        state:
          type: string
          enum: [on, off]
        colorTemperature:
          type: integer
          minimum: 0
          maximum: 100
          description: value is the percent of light color temperature.
        brightness:
          type: integer
          minimum: 0
          maximum: 100
          description: value is the percent of light brightness.
    curtain:
      type: object
      description: do some operations on a curtain
      properties:
        turnOnPercent:
          type: integer
          minimum: 0
          maximum: 100
          description: Percentage of curtain opening level. 0 means the curtain is closed, 100 means the curtain is complete opened.
    aircondition:
      type: object
      description: Cooling and heating air conditioners
      properties:
        state:
          type: string
          enum: [on, off]
        mode:
          type: string
          enum: [ cooling ,heating, stableTemperature ]
          description: >
            cooling - Cooling mode
            heating - Heating mode
            stableTemperature - constant temperature mode
        temperature:
          type: integer
          minimum: 16
          maximum: 35
          description: >
            Celsius temperature.
        direction:
          type: string
          description: The direction of air conditioning blowing air
          enum: [up_and_down, up, down]
    humidifier:
      type: object
      description: Can adjust the humidity of the room
      properties:
        state:
          type: string
          enum: [on, off, stableHumidity]
          description: on - open; off - close a device; stableHumidity - a humidifier keep a humidity value.
        humidity:
          type: integer
          minimum: 0
          maximum: 100
          description: >
            Percentage of humidity level.
    tv:
      type: object
      description: a tv just can turn on, turn off, adjust volume. a tv don't have other funtions, such as can't play music.
      properties:
        state:
          type: string
          enum: [on, off]
        volume:
          type: integer
          minimum: 0
          maximum: 100
    delayExecute:
      type: object
      description: a action should be  executed delay according to this field describle.
      properties:
        delayTime:
          type: integer
          description: >
            the seconds the action delay, this field should be in right sequence in actions array
    validTime:
      type: object
      description: valid triggered time sapn, the scene should only triggered in setting validTime
      properties:
        begin:
          type: string
          description: >
            the time begins of one way, such as "07:00", means begin at 7 clock in the morning. if time is earlier then begin time, the scene is not triggered.
        end:
          type: string
          description: >
            the time begins of one way, such as "20:00", means ends at 8 clock in the evening.if time is later then end time, the scene is not triggered.
    speaker:
      type: object
      description: the speaker play audio generated by text, it can also play music
      properties:
        content:
          type: string
          enum: [text, music]
          description: >  
            text - the speaker convert text to audio
            music - the speaker play music
        text:
          type: string
          description: when content field value is "text", this field should have value. the value is what to play as a voice.

    groupName:
      type: string
      enum: ["全部","客厅","卧室","主卧","房间","全屋","次卧","厨房","餐厅","阳台","卫生间","书房","儿童房","默认房间","洗手间","门口","客房","玄关","其他","办公室","一楼","走廊","工作间","过道","二楼","浴室","老人房","场景","衣帽间","默认楼层","吧台","影音室","茶室","三楼","楼下","楼梯","花园","楼上","娱乐室","车库","主卫","智慧客房","起居室","休息室","宿舍","杂物间","婴儿房","四楼","大厅","默认","北次卧","客卧","多功能室","主卧室","女儿房","其它","家","中厅","我的房间","其他位置","门厅","公卫","南次卧","洗衣房","客卫","设备间","宠物房","全屋"]
      description: The group where the device is located. If can not find location before a device name, the value of this field should be "全屋".
    scene:
      type: object
      required: [sceneName, triggers, actions]
      properties:
        id:
          type: string
          description: 'The identifier of a scene, which is created by server. If id is empty, will create a new scene. If id is not empty, will update a exist scene.'
        sceneName:
          type: string
          description: 'Short summary of this scene, MUST in chinese, up to 5 Chinese characters'
        triggers:
          type: array
          description: 'Triggers of the scene. If there are multiple triggers, each trigger can trigger scene execution.'
          items:
            type: object
            description: 'Define one trigger'
            required: [type, repeat]
            oneOf:
            - $ref: '#/components/schemas/VoiceCommand'
            - $ref: '#/components/schemas/Time'
            - $ref: '#/components/schemas/Switch'
            - $ref: '#/components/schemas/DoorLock'
            - $ref: '#/components/schemas/HumanSensor'
            - $ref: '#/components/schemas/TemperatureHumiditySensor'
            discriminator:
              propertyName: type
            properties:
              type:
                type: string
              groupName:
                $ref: '#/components/schemas/groupName'
        actions:
          type: array
          description: 'When the trigger is triggered, all actions will be executed.'
          items:
            type: object
            description: 'one action of a device'
            required: [type, name, groupName]
            oneOf:
            - $ref: '#/components/schemas/alarm'
            - $ref: '#/components/schemas/light'
            - $ref: '#/components/schemas/curtain'
            - $ref: '#/components/schemas/aircondition'
            - $ref: '#/components/schemas/humidifier'
            - $ref: '#/components/schemas/tv'
            - $ref: '#/components/schemas/delayExecute'
            - $ref: '#/components/schemas/validTime'
            - $ref: '#/components/schemas/speaker'
            discriminator:
              propertyName: type
            properties:
              type:
                type: string
                enum: [ alarm, light, curtain, aircondition, humidifier, delayExecute, validTime, speaker]
              groupName:
                $ref: '#/components/schemas/groupName'
              name:
                type: string
                description: User-specified iot device name
paths:
  /createOrUpdateIotScenes:
    post:
      operationId: createOrUpdateIotScenes
      summary: add or update iot control scene list
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                scenes:
                  type: array
                  items:
                    $ref: '#/components/schemas/scene'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: integer
                    description: 0 means success, others means fail
                  id_list:
                    type: array
                    items:
                      type: integer
                    description: the scene id list, which were created or updated  by the request
